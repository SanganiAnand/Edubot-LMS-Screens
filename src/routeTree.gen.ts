/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users/index'
import { Route as UsersAddImport } from './routes/users/add'
import { Route as UsersUserIdImport } from './routes/users/$userId'
import { Route as OrganizationOrganization1Import } from './routes/organization/organization1'
import { Route as OrganizationAddOrganizationImport } from './routes/organization/add-organization'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const UsersAddRoute = UsersAddImport.update({
  id: '/users/add',
  path: '/users/add',
  getParentRoute: () => rootRoute,
} as any)

const UsersUserIdRoute = UsersUserIdImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRoute,
} as any)

const OrganizationOrganization1Route = OrganizationOrganization1Import.update({
  id: '/organization/organization1',
  path: '/organization/organization1',
  getParentRoute: () => rootRoute,
} as any)

const OrganizationAddOrganizationRoute =
  OrganizationAddOrganizationImport.update({
    id: '/organization/add-organization',
    path: '/organization/add-organization',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/organization/add-organization': {
      id: '/organization/add-organization'
      path: '/organization/add-organization'
      fullPath: '/organization/add-organization'
      preLoaderRoute: typeof OrganizationAddOrganizationImport
      parentRoute: typeof rootRoute
    }
    '/organization/organization1': {
      id: '/organization/organization1'
      path: '/organization/organization1'
      fullPath: '/organization/organization1'
      preLoaderRoute: typeof OrganizationOrganization1Import
      parentRoute: typeof rootRoute
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdImport
      parentRoute: typeof rootRoute
    }
    '/users/add': {
      id: '/users/add'
      path: '/users/add'
      fullPath: '/users/add'
      preLoaderRoute: typeof UsersAddImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/organization/add-organization': typeof OrganizationAddOrganizationRoute
  '/organization/organization1': typeof OrganizationOrganization1Route
  '/users/$userId': typeof UsersUserIdRoute
  '/users/add': typeof UsersAddRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/organization/add-organization': typeof OrganizationAddOrganizationRoute
  '/organization/organization1': typeof OrganizationOrganization1Route
  '/users/$userId': typeof UsersUserIdRoute
  '/users/add': typeof UsersAddRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/organization/add-organization': typeof OrganizationAddOrganizationRoute
  '/organization/organization1': typeof OrganizationOrganization1Route
  '/users/$userId': typeof UsersUserIdRoute
  '/users/add': typeof UsersAddRoute
  '/users/': typeof UsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/organization/add-organization'
    | '/organization/organization1'
    | '/users/$userId'
    | '/users/add'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/organization/add-organization'
    | '/organization/organization1'
    | '/users/$userId'
    | '/users/add'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/organization/add-organization'
    | '/organization/organization1'
    | '/users/$userId'
    | '/users/add'
    | '/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OrganizationAddOrganizationRoute: typeof OrganizationAddOrganizationRoute
  OrganizationOrganization1Route: typeof OrganizationOrganization1Route
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersAddRoute: typeof UsersAddRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OrganizationAddOrganizationRoute: OrganizationAddOrganizationRoute,
  OrganizationOrganization1Route: OrganizationOrganization1Route,
  UsersUserIdRoute: UsersUserIdRoute,
  UsersAddRoute: UsersAddRoute,
  UsersIndexRoute: UsersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/organization/add-organization",
        "/organization/organization1",
        "/users/$userId",
        "/users/add",
        "/users/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/organization/add-organization": {
      "filePath": "organization/add-organization.tsx"
    },
    "/organization/organization1": {
      "filePath": "organization/organization1.tsx"
    },
    "/users/$userId": {
      "filePath": "users/$userId.tsx"
    },
    "/users/add": {
      "filePath": "users/add.tsx"
    },
    "/users/": {
      "filePath": "users/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
